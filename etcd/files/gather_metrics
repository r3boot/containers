#!/bin/sh

# Allow enable/disable of metrics by defining METRICS_SINK
if [[ -z "${METRICS_SINK}" ]]; then
  echo "[+] METRICS_SINK not set, metrics disabled"
  exit 0
fi

# ETCD_ENDPOINT must be defined in order to work
if [[ -z "${ETCD_ENDPOINT}" ]]; then
  echo "[+] ETCD_ENDPOINT not set, metrics disabled"
  exit 0
fi

METRICS_SINK="${METRICS_SINK}/write?db=etcd"
LOOP_INTERVAL='15'

echo "[+] Reporting metrics to ${METRICS_SINK}"
while :; do
  T_NOW="$(date +%s)"

  # Multiply by 1000000000 for nanosecond resolution
  TIMESTAMP="$(expr ${T_NOW} \* 1000000000)"

  # Gather metrics and convert to influx line protocol format
  curl -s ${ETCD_ENDPOINT}/metrics | while read METRIC; do
    # Skip comments
    echo ${METRIC} | grep -q '^#'
    if [[ ${?} -eq 0 ]]; then
      continue
    fi

    KEY="$(echo ${METRIC} | cut -d" " -f1)"
    VALUE="$(echo ${METRIC} | cut -d" " -f2)"

    ADDITIONAL=""
    echo ${KEY} | grep -q '\{'
    if [[ ${?} -eq 0 ]]; then
      SUBKEY="$(echo ${KEY} | cut -d\{ -f2 | cut -d\} -f1)"
      SKNAME="$(echo ${SUBKEY} | cut -d= -f1)"
      SKVAL="$(echo ${SUBKEY} | cut -d= -f2)"

      if [[ "${SKNAME}" == "handler" ]]; then
        break
      fi
      KEY="$(echo "${KEY}" | cut -d\{ -f1)"
      ADDITIONAL=",${SKNAME}=${SKVAL}"
    fi

    echo -e "${KEY},host=${HOSTNAME}${ADDITIONAL} value=${VALUE} ${TIMESTAMP}"
  done

  # Post the data. Make sure we timeout in LOOP_INTERVAL, so we can
  # have more or less repeated loop timings
  #curl -XPOST \
  #  --connect-timeout ${LOOP_INTERVAL} \
  #  --expect100-timeout ${LOOP_INTERVAL} \
  #  --data-binary "${METRICS}" \
  #  "${METRICS_SINK}" \
  #  2>/dev/null

  # Sleep for one minute if we have a problem writing to METRICS_SINK
  if [[ ${?} -ne 0 ]]; then
    echo "[+] Problem reporting metrics, sleeping 1 minute"
    sleep 60
    continue
  fi

  # Calculate the amount of time this loop iteration needs to sleep to
  # keep it close to LOOP_INTERVAL seconds
  T_ELAPSED="$(expr $(date +%s) - ${T_NOW})"
  SLEEP_INTERVAL="$(expr ${LOOP_INTERVAL} - ${T_ELAPSED})"
  sleep ${SLEEP_INTERVAL}
done
