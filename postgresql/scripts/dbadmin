#!/bin/bash

DB_HOST='postgresql.service.local'
DB_USER='dbadmin'
DB_NAME='template1'
DB_PASS='49XnohyQ71xblQ'

PSQL="psql -h ${DB_HOST} -d ${DB_NAME} -U ${DB_USER}"

function has_user {
  if [[ ${#} -ne 1 ]]; then
    echo "[E] has_user: Need a username"
    exit 1
  fi
  USERNAME="${1}"

  ${PSQL} -c "SELECT usename FROM pg_user WHERE usename = '${USERNAME}'" \
    | grep -q ${USERNAME}
  echo ${?}
}

function add_user {
  if [[ ${#} -ne 1 ]]; then
    echo "[E] add_user: Need an argument"
    exit 1
  fi
  ARGUMENT="${1}"

  if [[ $(echo ${ARGUMENT} | grep -c ':') -ne 1 ]]; then
    echo "[E] add_user: Argument needs format <username>:<password>:<role1>,<role2>,..."
    exit 1
  fi

  USERNAME="$(echo ${ARGUMENT} | cut -d\: -f1)"
  PASSWORD="$(echo ${ARGUMENT} | cut -d\: -f2)"
  RIGHTS="$(echo ${ARGUMENT} | cut -d\: -f3 | sed -e 's/,/\ /g')"

  if [[ -z ${USERNAME} ]]; then
    echo "[E] add_user: username cannot be empty"
    exit 1
  fi

  if [[ -z ${PASSWORD} ]]; then
    echo "[E] add_user: password cannot be empty"
    exit 1
  fi

  if [[ $(has_user ${USERNAME}) -eq 0 ]]; then
    echo "[E] add_user: ${USERNAME} already exists"
    exit 1
  fi

  echo "[*] add_user: Adding user ${USERNAME} (${RIGHTS})"
  ${PSQL} -c "CREATE USER ${USERNAME}"
  ${PSQL} -c "ALTER USER ${USERNAME} WITH ENCRYPTED PASSWORD '${PASSWORD}'"
  ${PSQL} -c "ALTER USER ${USERNAME} LOGIN ${RIGHTS}"
}

function del_user {
  if [[ ${#} -ne 1 ]]; then
    echo "[E] del_user: Need a username"
    exit 1
  fi
  USERNAME="${1}"

  if [[ $(has_user ${USERNAME}) -eq 1 ]]; then
    echo "del_user: ${USERNAME} does not exist"
    exit 1
  fi

  echo "[*] del_user: Removing user ${USERNAME}"
  ${PSQL} -c "DROP USER ${USERNAME}"
}

function has_database {
  if [[ ${#} -ne 1 ]]; then
    echo "[E] has_database: Need a database name"
    exit 1
  fi
  DATABASE="${1}"

  ${PSQL} -c "SELECT datname FROM pg_database WHERE datname = '${DATABASE}'" \
    | grep -q ${DATABASE}
  echo ${?}
}

function add_database {
  if [[ ${#} -ne 1 ]]; then
    echo "[E] add_database: Need an argument"
    exit 1
  fi
  ARGUMENT="${1}"

  if [[ $(echo ${ARGUMENT} | grep -c ':') -ne 1 ]]; then
    echo "[E] add_database: Argument needs format <database>:<owner>"
    exit 1
  fi

  DATABASE="$(echo ${ARGUMENT} | cut -d\: -f1)"
  USERNAME="$(echo ${ARGUMENT} | cut -d\: -f2)"

  if [[ -z ${DATABASE} ]]; then
    echo "[E] add_database: database cannot be empty"
    exit 1
  fi

  if [[ -z ${USERNAME} ]]; then
    echo "[E] add_database: username cannot be empty"
    exit 1
  fi

  if [[ $(has_database ${DATABASE}) -eq 0 ]]; then
    echo "[E] add_database: ${DATABASE} already exists"
    exit 1
  fi

  if [[ $(has_user ${USERNAME}) -eq 1 ]]; then
    echo "[E] add_database: User ${USERNAME} does not exist"
    exit 
  fi

  echo "[*] add_database: Creating ${DATABASE}"
  ${PSQL} -c "GRANT ${USERNAME} TO ${DB_USER}"
  ${PSQL} -c "CREATE DATABASE ${DATABASE} OWNER ${USERNAME}"
  ${PSQL} -c "REVOKE ${USERNAME} FROM ${DB_USER}"
}

function del_database {
  if [[ ${#} -ne 1 ]]; then
    echo "[E] del_database: Need a database name"
    exit 1
  fi
  DATABASE="${1}"

  if [[ $(has_database ${DATABASE}) -eq 1 ]]; then
    echo "[E] del_database: ${DATABASE} does not exist"
    exit 1
  fi

  OWNER="$(${PSQL} -c "SELECT usename FROM pg_user,pg_database WHERE usesysid = pg_database.datdba AND pg_database.datname = '${DATABASE}'" | head -3 | tail -1 | awk '{print $1}')"

  echo "[*] del_database: Removing ${DATABASE}"
  ${PSQL} -c "GRANT ${OWNER} TO ${DB_USER}"
  ${PSQL} -c "DROP DATABASE ${DATABASE}"
  ${PSQL} -c "REVOKE ${OWNER} FROM ${DB_USER}"
}

# Check and parse arguments
if [[ ${#} -ne 3 ]]; then
  echo "Usage: $(basename ${0}) <has|add|del> <user|db> ..."
  exit 1
fi
OPERATION="${1}"
shift
SUBSYSTEM="${1}"
shift
ARGUMENT="${1}"

# Setup pgpass if needed
if [[ ! -f ${HOME}/.pgpass ]]; then
  echo "[*] Configuring ${HOME}/.pgpass"
  cat > ${HOME}/.pgpass <<EOF
# hostname:port:database:username:password
${DB_HOST}:5432:${DB_NAME}:${DB_USER}:${DB_PASS}
EOF
  chmod 0600 ${HOME}/.pgpass
fi

case "${OPERATION}" in
  "has")
    case "${SUBSYSTEM}" in
      "user")
        if [[ $(has_user ${ARGUMENT}) -eq 0 ]]; then
          echo "[*] user ${ARGUMENT} exists"
        else
          echo "[*] user ${ARGUMENT} does not exist"
          exit 1
        fi
        ;;
      "db")
        if [[ $(has_database ${ARGUMENT}) -eq 0 ]]; then
          echo "[*] database ${ARGUMENT} exists"
        else
          echo "[*] database ${ARGUMENT} does not exist"
          exit 1
        fi
        ;;
    esac
    ;;
  "add")
    case "${SUBSYSTEM}" in
      "user")
        add_user "${ARGUMENT}"
        ;;
      "db")
        add_database "${ARGUMENT}"
        ;;
    esac
    ;;
  "del")
    case "${SUBSYSTEM}" in
      "user")
        del_user "${ARGUMENT}"
        ;;
      "db")
        del_database "${ARGUMENT}"
        ;;
    esac
    ;;
  *)
    echo "Usage: $(basename ${0}) <has|add|del> <user|db> ..."
    exit 1
    ;;
esac

exit 0
